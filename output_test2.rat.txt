Symbol Table
============================
ID: low     Type: int     MemLocation: 5000
ID: high     Type: int     MemLocation: 5001
ID: step     Type: int     MemLocation: 5002
============================
Instruction Table
============================
Address: 1     Operation: STDIN
Address: 2     Operation: POPM     Operand: 5000
Address: 3     Operation: STDIN
Address: 4     Operation: POPM     Operand: 5001
Address: 5     Operation: STDIN
Address: 6     Operation: POPM     Operand: 5002
Address: 7     Operation: LABEL
Address: 8     Operation: PUSHM     Operand: 5000
Address: 9     Operation: PUSHM     Operand: 5001
Address: 10     Operation: LEQ
Address: 11     Operation: JUMPZ     Operand: 21
Address: 12     Operation: PUSHM     Operand: 5000
Address: 13     Operation: STDOUT
Address: 14     Operation: PUSHM     Operand: 5000
Address: 15     Operation: STDOUT
Address: 16     Operation: PUSHM     Operand: 5000
Address: 17     Operation: PUSHM     Operand: 5002
Address: 18     Operation: ADD
Address: 19     Operation: POPM     Operand: 5000
Address: 20     Operation: JUMP     Operand: 7
============================
Token: separator   Lexeme: %%   Line Number: 3
Token: keyword   Lexeme: int   Line Number: 4
	<Opt_Declaration_List> -> <Declaration_List>
	<Declaration_List> -> <Declaration> ;
	<Declaration> -> int <IDs>
Token: id   Lexeme: low   Line Number: 4
	<IDs> -> <Identifier> , IDs
Token: separator   Lexeme: ,   Line Number: 4
Token: id   Lexeme: high   Line Number: 4
	<IDs> -> <Identifier> , IDs
Token: separator   Lexeme: ,   Line Number: 4
Token: id   Lexeme: step   Line Number: 4
	<IDs> -> <Identifier>
Token: separator   Lexeme: ;   Line Number: 4
Token: keyword   Lexeme: get   Line Number: 6
	<Statement_List> -> <Statement> <Statement_List>
	<Statement> -> <Scan>
	<Scan> -> get ( <IDs> ) ;
Token: separator   Lexeme: (   Line Number: 6
Token: id   Lexeme: low   Line Number: 6
	<IDs> -> <Identifier> , IDs
Token: separator   Lexeme: ,   Line Number: 6
Token: id   Lexeme: high   Line Number: 6
	<IDs> -> <Identifier> , IDs
Token: separator   Lexeme: ,   Line Number: 6
Token: id   Lexeme: step   Line Number: 6
	<IDs> -> <Identifier>
Token: separator   Lexeme: )   Line Number: 6
Token: separator   Lexeme: ;   Line Number: 6
Token: keyword   Lexeme: while   Line Number: 7
	<Statement_List> -> <Statement>
	<Statement> -> <While>
	<While> -> while ( <Condition> ) <Statement>
Token: separator   Lexeme: (   Line Number: 7
Token: id   Lexeme: low   Line Number: 7
	<Condition> -> <Expression> <Relop> <Expression>
	<Expression> -> <Term> <Expression'>
	<Term> -> <Factor> <Term'>
	<Factor> -> <Primary>
	<Primary> -> <Identifier>
Token: operator   Lexeme: <=   Line Number: 7
	<Term'> -> ϵ
	<Relop> -> <=
Token: id   Lexeme: high   Line Number: 7
	<Expression> -> <Term> <Expression'>
	<Term> -> <Factor> <Term'>
	<Factor> -> <Primary>
	<Primary> -> <Identifier>
Token: separator   Lexeme: )   Line Number: 7
	<Term'> -> ϵ
Token: separator   Lexeme: {   Line Number: 8
	<Statement> -> <Compound>
	<Compound> -> { <Statement_List> }
Token: keyword   Lexeme: put   Line Number: 9
	<Statement_List> -> <Statement> <Statement_List>
	<Statement> -> <Print>
	<Print> -> put ( <Expression> ) ;
Token: separator   Lexeme: (   Line Number: 9
Token: id   Lexeme: low   Line Number: 9
	<Expression> -> <Term> <Expression'>
	<Term> -> <Factor> <Term'>
	<Factor> -> <Primary>
	<Primary> -> <Identifier>
Token: separator   Lexeme: )   Line Number: 9
	<Term'> -> ϵ
Token: separator   Lexeme: ;   Line Number: 9
Token: keyword   Lexeme: put   Line Number: 10
	<Statement_List> -> <Statement> <Statement_List>
	<Statement> -> <Print>
	<Print> -> put ( <Expression> ) ;
Token: separator   Lexeme: (   Line Number: 10
Token: id   Lexeme: low   Line Number: 10
	<Expression> -> <Term> <Expression'>
	<Term> -> <Factor> <Term'>
	<Factor> -> <Primary>
	<Primary> -> <Identifier>
Token: separator   Lexeme: )   Line Number: 10
	<Term'> -> ϵ
Token: separator   Lexeme: ;   Line Number: 10
Token: id   Lexeme: low   Line Number: 11
	<Statement_List> -> <Statement>
	<Statement> -> <Assign>
	<Assign> -> <Identifier> = <Expression> ;
Token: operator   Lexeme: =   Line Number: 11
Token: id   Lexeme: low   Line Number: 11
	<Expression> -> <Term> <Expression'>
	<Term> -> <Factor> <Term'>
	<Factor> -> <Primary>
	<Primary> -> <Identifier>
Token: operator   Lexeme: +   Line Number: 11
	<Term'> -> ϵ
	<Expression'> -> + <Term> <Expression'>
Token: id   Lexeme: step   Line Number: 11
	<Term> -> <Factor> <Term'>
	<Factor> -> <Primary>
	<Primary> -> <Identifier>
Token: separator   Lexeme: ;   Line Number: 11
	<Term'> -> ϵ
	<Expression'> -> ϵ
Token: separator   Lexeme: }   Line Number: 12
Token: separator   Lexeme: %%   Line Number: 13
