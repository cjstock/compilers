Symbol Table
============================
ID: low     Type: int     MemLocation: 5000
ID: high     Type: int     MemLocation: 5001
ID: step     Type: int     MemLocation: 5002
============================
Instruction Table
============================
Address: 1     Operation: STDIN
Address: 2     Operation: POPM     Operand: 5000
Address: 3     Operation: STDIN
Address: 4     Operation: POPM     Operand: 5001
Address: 5     Operation: STDIN
Address: 6     Operation: POPM     Operand: 5002
Address: 7     Operation: LABEL
Address: 8     Operation: PUSHI     Operand: 1
============================
Token: separator   Lexeme: %%   Line Number: 3
Token: keyword   Lexeme: int   Line Number: 4
	<Opt_Declaration_List> -> <Declaration_List>
	<Declaration_List> -> <Declaration> ;
	<Declaration> -> int <IDs>
Token: id   Lexeme: low   Line Number: 4
	<IDs> -> <Identifier> , IDs
Token: separator   Lexeme: ,   Line Number: 4
Token: id   Lexeme: high   Line Number: 4
	<IDs> -> <Identifier> , IDs
Token: separator   Lexeme: ,   Line Number: 4
Token: id   Lexeme: step   Line Number: 4
	<IDs> -> <Identifier>
Token: separator   Lexeme: ;   Line Number: 4
Token: keyword   Lexeme: get   Line Number: 6
	<Statement_List> -> <Statement> <Statement_List>
	<Statement> -> <Scan>
	<Scan> -> get ( <IDs> ) ;
Token: separator   Lexeme: (   Line Number: 6
Token: id   Lexeme: low   Line Number: 6
	<IDs> -> <Identifier> , IDs
Token: separator   Lexeme: ,   Line Number: 6
Token: id   Lexeme: high   Line Number: 6
	<IDs> -> <Identifier> , IDs
Token: separator   Lexeme: ,   Line Number: 6
Token: id   Lexeme: step   Line Number: 6
	<IDs> -> <Identifier>
Token: separator   Lexeme: )   Line Number: 6
Token: separator   Lexeme: ;   Line Number: 6
Token: keyword   Lexeme: while   Line Number: 7
	<Statement_List> -> <Statement>
	<Statement> -> <While>
	<While> -> while ( <Condition> ) <Statement>
Token: separator   Lexeme: (   Line Number: 7
Token: keyword   Lexeme: true   Line Number: 7
	<Condition> -> <Expression> <Relop> <Expression>
	<Expression> -> <Term> <Expression'>
	<Term> -> <Factor> <Term'>
	<Factor> -> <Primary>
	<Primary> -> true
Token: separator   Lexeme: )   Line Number: 7
	<Term'> -> Ïµ
SYNTAX ERROR:: Line Number:7    Token:separator     Value:)    Message:Expected "==", "/=", ">", "<", "=>", or "<=", found ")"!
